  %% logictools.sty
  %% Copyright 2005 Miles Min Yin Cheang  %% did you mean to type 2025?
  %
  % This work may be distributed and/or modified under the
  % conditions of the LaTeX Project Public License, either version 1.3
  % of this license or (at your option) any later version.
  % The latest version of this license is in
  %   http://www.latex-project.org/lppl.txt
  % and version 1.3 or later is part of all distributions of LaTeX
  % version 2005/12/01 or later.
  %
  % This work has the LPPL maintenance status “maintained”.
  % 
  % The Current Maintainer of this work is Miles Min Yin Cheang
  %
  % This work consists of the file logictools.sty



\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{logictools}[2025/05/03, v0.1.0 logictools]

\RequirePackage{xparse}% not necessary with a moderately recent latex format
\RequirePackage{expl3}% not necessary with a moderately recent latex format
\RequirePackage{stmaryrd}% redefines a significant number of symbols; certainly should not be used with unicode-math
%\RequirePackage{filecontentsdef}
% \RequirePackage{amsmath}% loaded by mathtools below
\RequirePackage{nicefrac}% dubious; certainly should not be used with unicode-math
\RequirePackage{bussproofs}
\RequirePackage{adjustbox}
\RequirePackage{mathtools}
\RequirePackage{trimspaces}
\DeclareOption{oxford}{
% Provides semantic value function
% Gives automatic mathcal letters for the structure
% Optionally gives a variable assignment, where if a single Latin letter is input then it will return the associated Greek symbol.
% this looks very wrong: Greek symbols in logic should typically be set in maths mode
% you really don't want \text here ...
% similar comments apply to other uses below
\NewDocumentCommand{\semval}{m m o}
{%
\IfNoValueTF{#3}
    {\ensuremath{|#1|_{\mathcal{#2}}}}
    % you can greatly simplify whatever you call \textgreek
    % then you can avoid all the switches in-and-out of modes, which will screw 
    % up spacing etc.
    {\ensuremath{|#1|_{\mathcal{#2}}^{\textgreek{#3}}}}%
}

% Provides "y differs from x in at most v" sign
\newcommand{\difmost}[1]{ % you are adding a space here
\overset{#1}{\sim} % and another here
}

% Provides logical comma symbol

\newcommand{\lcma}{ % you are adding a space here
\adjustbox{trim={.45\width} 0pt 0pt 0pt ,clip}{$\circ$} % and another here
}

% Provides an easy way to notate an unspecified proof from a set of premisses
% Optionally, can include discharged assumptions

\NewDocumentCommand{\prooffrom}{m t^ t_ o d<> m}
{%
\def\@prffrmalign{m}%
\IfBooleanT{#2}%
{%
\IfBooleanT{#3}{\PackageWarning{logictools}{You shouldn't use both ^ and _ in one prooffrom. You got lucky, if you had done this the other way around (_^) everything would break.}}%
\def\@prffrmalign{t}%
}%
\IfBooleanT{#3}{\def\@prffrmalign{b}}%
\IfNoValueTF{#4}%
% use of \hspace in maths and so on again looks rather icky
% but maybe bussproofs is already messy (I've mostly used the newer ebproof)
    {\IfNoValueTF{#5}%
        {\alwaysNoLine
        \AxiomC{\fbox{#1}}%
        \UnaryInfC{\raisebox{0.675ex}[3.25ex]{\smash{\vdots}}}%
        \UnaryInfC{#6}%
        \alwaysSingleLine}
        {\alwaysNoLine
        \AxiomC{\adjustbox{fbox,valign=\@prffrmalign}{#1}\adjustbox{valign=\@prffrmalign, rlap}{\hspace{0.1em}\scriptsize#5}}%
        \UnaryInfC{\raisebox{0.675ex}[3.25ex]{\smash{\vdots}}}%
        \UnaryInfC{#6}%
        \alwaysSingleLine}%
    }%
    {\IfNoValueF{#5}{\PackageWarning{logictools}{You shouldn't use both [...] and <...> in one prooffrom. You got lucky, if you had done this the other way around (<...>[...]) you would have gotten strange results.}}%
    \alwaysNoLine
    \AxiomC{\adjustbox{fbox,valign=\@prffrmalign}{#1}\adjustbox{valign=\@prffrmalign, rlap}{\hspace{0.1em}\scriptsize$\left[\text{#4}\right]$}}%
    \UnaryInfC{\raisebox{0.675ex}[3.25ex]{\smash{\vdots}}}%
    \UnaryInfC{#6}%
    \alwaysSingleLine}%
}%
}%
\DeclareOption*{\PackageWarning{logictools}{Unknown ‘\CurrentOption’}}
\ProcessOptions\relax

%---------------------------------------------------------------------

% Thanks to everyone at TeX-exchange for teaching me how to use expl3!
\ExplSyntaxOn
\exp_args:Nc \mathchardef { __formal_original_): }=\char_value_mathcode:n {`)}
\exp_args:Nc \mathchardef { __formal_original_(: }=\char_value_mathcode:n {`(}
\exp_args:Nc \mathchardef { __formal_original_|: }=\char_value_mathcode:n {`|}
\exp_args:Nc \mathchardef { __formal_original_;: }=\char_value_mathcode:n {`;}
\exp_args:Nc \mathchardef { __formal_original_.: }=\char_value_mathcode:n {`.}
\exp_args:Nc \mathchardef { __formal_original_[: }=\char_value_mathcode:n {`[}
\tl_new:N \l__formal_rbracket_tl
\tl_new:N \l__formal_lbracket_tl
\keys_define:nn {formal/options}
 {
  parstackkern        .muskip_set:N = \l__formal_parstackkern_muskip,
  parinnerpad         .muskip_set:N = \l__formal_parinnerpad_muskip,
  italiccorrection    .muskip_set:N = \l__formal_italiccorrection_muskip,
  parvoffset          .dim_set:N = \l__formal_parvoffset_dim,
  quantskip           .muskip_set:N = \l__formal_quantskip_muskip,
  lastquantskip       .muskip_set:N = \l__formal_lastquantskip_muskip,
  scriptspace         .dim_set:N = \l__formal_scriptspace_dim,

  parstackkern        .default:n = -0.9mu,
  parinnerpad         .default:n = 0.9mu,
  italiccorrection    .default:n = 1.12mu,
  parvoffset          .default:n = 0.2ex,
  quantskip           .default:n = 4.32mu,
  lastquantskip       .default:n = 4.32mu,
  scriptspace         .default:n = -0.025em,
  
  % this isn't how it works: you can't have the same key name be two different
  % things at the same time: either it sets a tl variable or it is a choice 
  % (or something else, of course)
  % l3keys is not like pgfkeys, where you can 'overload' key names
  % partype .tl_set:N = \l__formal_partype_tl,
  partype .choice:,
  
  partype / double .code:n = 
  % pointless and confusing - you never use this
  % if you need it in some future version, define it then and
  % provide some way for users to set it, if appropriate
  % \tl_set:Nn \l__formal_partype_tl {double} % futureproofing, unnecessary
  \tl_set:Nn \l__formal_rbracket_tl {\rrparenthesis}
  \tl_set:Nn \l__formal_lbracket_tl {\llparenthesis},
  
  partype / single .code:n = 
  % \tl_set:Nn \l__formal_partype_tl {single} % futureproofing, unnecessary
  \tl_set:Nn \l__formal_rbracket_tl {%\char_set_mathcode:nn {41} {41} $)$}
  \use:c{__formal_original_):}}
  \tl_set:Nn \l__formal_lbracket_tl {%\char_set_mathcode:nn {40} {40} $($},
  \use:c{__formal_original_(:}},
  partype / unknown .code:n =
    \msg_error:nneee { formal/options } { unknown_bracket_type }
        { partype } % Name of choice key
        { double , single } % Valid choices
        { \exp_not:n {#1} }, % Invalid choice given
        
  partype           .default:n = single,
 }
% Initialise all the keys
\keys_set:nn {formal/options}
     {
      parstackkern,
      parinnerpad,
      italiccorrection,
      parvoffset,
      quantskip,
      lastquantskip,
      partype,
      scriptspace,
     }

% variables should either be local or global
% you are naming this local, sometimes setting them locally and sometimes globally
% - don't!
% \bool_new:N \g__formal_inside_bool
% \bool_set_false:N \g__formal_inside_bool
% guessing this should be global: if you need a local version, too, create another variable
%   e.g. \l__formal_inside_bool 
\bool_new:N \g__formal_inside_bool
\bool_gset_false:N \g__formal_inside_bool
\bool_new:N \l__formal_escaped_bool
\bool_set_false:N \l__formal_escaped_bool
% variables must start \l_ or \g_
% so no \hd_ or \bdy_ or ...
% if local, only set locally ever
% if global, only set globally
% use a second underscore if the variable is internal: \l__ or \g__
% the module name comes next - always - and another underscore: 
%   \l__formal_ or \g__formal_ (internal)
%   \l_formal_ or \g_formal_ (public)
% next a description e.g. \l_formal_left
% finally the type, which should match the string expl3 uses for that type
% preceded by an underscore
%   e.g. \g__formal_leftcorner_box (box is the type - not hbox or #1lparbox)

\box_new:N \l__formal_lparbox_box
\box_new:N \l__formal_rparbox_box

\cs_new_protected:Nn \__formal_llpar_char:
{
    \bool_if:NTF \l__formal_escaped_bool 
    {\use:c {__formal_original_(:}}
    {
        \box_use:N \l__formal_lparbox_box \peek_charcode:NF ( {\mskip \l__formal_parinnerpad_muskip \bool_gset_true:N \g__formal_inside_bool}
    }
}

\cs_new_protected:Nn \__formal_rrpar_char:
{
    \bool_if:NTF \l__formal_escaped_bool
    {\use:c {__formal_original_):}}
    {
        \bool_if:NTF \g__formal_inside_bool 
        {\mskip \l__formal_parinnerpad_muskip \mkern \l__formal_italiccorrection_muskip} 
        {}
        
        \box_use:N \l__formal_rparbox_box
        \peek_charcode:NTF ) {\bool_gset_false:N \g__formal_inside_bool} {\bool_gset_true:N \g__formal_inside_bool}
    }
}

\cs_new_protected:Nn \__formal_escapele:
{
    \bool_set_inverse:N \l__formal_escaped_bool
}



\cs_new_protected:Nn \__formal_quantstackenter:
{
    \bool_if:NTF \l__formal_escaped_bool 
        {\use:c {__formal_original_|:}}
        {
            \begingroup
            \char_set_active_eq:nN { `| } \__formal_quantstackesc:
            \char_set_active_eq:nN { `; } \__formal_quantdivider:
            \char_set_mathcode:nn { `; } { "8000 }
            \__formal_headquant:w
        }
}

\cs_new_protected:Npn \__formal_headquant:w #1,
{
    \tl_trim_spaces_apply:nN {#1} \__formal_headbox:n
}

\cs_new_protected:Npn \__formal_headbox:n #1
{
    \box_use:c{l__formal_hd_
    #1_box}
}


\cs_new_protected:Npn \__formal_quantdivider:
{
    \bool_if:NTF \l__formal_escaped_bool 
        {\use:c {__formal_original_;:}}
        {\__formal_bdyquant:w}
}

\cs_new_protected:Npn \__formal_bdyquant:w #1,
{
    \mskip \use:c{l__formal_quantskip_muskip} \tl_trim_spaces_apply:nN {#1} \__formal_bodybox:n
}

\cs_new_protected:Npn \__formal_bodybox:n #1
{
    \box_use:c{__formal_bdy_
    #1_box}
}

\cs_new_protected:Nn \__formal_quantstackesc:
{
    \endgroup \mskip \use:c{l__formal_lastquantskip_muskip}
}

\cs_new_protected:Nn \__formal_dot:
{
    \peek_catcode_remove:NTF =
        {\doteq}
        {\use:c {__formal_original_.:}}
}

\cs_new_protected:Nn \__formal_lbrack:
{
    \bool_if:NTF \l__formal_escaped_bool 
        {\use:c {__formal_original_[:}}
        {\__formal_varsub:w}
}

% this is not a good way to do this b/c it is not at all semantic ...
\cs_new_protected:Npn \__formal_varsub:w #1/#2]
{
    \use:c{__formal_original_[:}\nicefrac{#1}{#2}]
}

\NewDocumentEnvironment{formallogic}{O{}}
{
    \setlength{\parindent}{0pt}
    \cs_set:Npn \par {$\newline$} % why maths mode for \newline??
    \keys_set:nn {formal/options} % Load any settings given in the optional argument.
        {
            #1,
        }
    \setlength\scriptspace{\l__formal_scriptspace_dim}

    \hbox_set:Nn \l__formal_lparbox_box 
        {
            \raisebox{\l__formal_parvoffset_dim}{$\l__formal_lbracket_tl \mkern \l__formal_parstackkern_muskip$}
        }

    \hbox_set:Nn \l__formal_rparbox_box 
        {
            \raisebox{\l__formal_parvoffset_dim}{$\mkern \l__formal_parstackkern_muskip \l__formal_rbracket_tl$}
        }

    \char_set_active_eq:nN { `( } \__formal_llpar_char:
    \char_set_mathcode:nn { `( } { "8000 }
    \char_set_active_eq:nN { `) } \__formal_rrpar_char:
    \char_set_mathcode:nn { `) } { "8000 }
    \char_set_active_eq:nN { `" } \__formal_escapele:
    \char_set_mathcode:nn { `" } { "8000 }
    \char_set_active_eq:nN { `| } \__formal_quantstackenter:
    \char_set_mathcode:nn { `| } { "8000 }
    \char_set_active_eq:nN { `. } \__formal_dot:
    \char_set_mathcode:nn { `. } { "8000 }
    \char_set_active_eq:nN { `[ } \__formal_lbrack:
    \char_set_mathcode:nn { `[ } { "8000 }

    \(
}
{\)}

% make quants
\NewDocumentCommand{\DeclareQuantifier}{m m O{0mu} O{0mu}}
{
    \muskip_gzero_new:c {g__formal_#1bef_muskip}
    \muskip_gset:cn {g__formal_#1bef_muskip} {#3}
    \muskip_gzero_new:c {g__formal_#1int_mukern}
    \muskip_gset:cn {g__formal_#1int_mukern} {#4}
    \box_gclear_new:c {g__formal_hd_#1_box}
    \hbox_gset:cn {g__formal_hd_#1_box} 
        {
            \ensuremath{#2 \mkern \use:c{g__formal_#1int_mukern}}
        }
    \box_gclear_new:c {g__formal_bdy_#1_box}
    \hbox_gset:cn {g__formal_bdy_#1_box} 
        {
            \ensuremath{\mskip \use:c{g__formal_#1bef_muskip} #2 \mkern \use:c{g__formal_#1int_mukern}}
        }
}
\NewDocumentCommand{\LDeclareQuantifier}{m m O{0mu} O{0mu}}
{
    \muskip_zero_new:c {l__formal_#1bef_muskip}
    \muskip_set:cn {l__formal_#1bef_muskip} {#3}
    \muskip_zero_new:c {l__formal_#1int_mukern}
    \muskip_set:cn {l__formal_#1int_mukern} {#4}
    \box_clear_new:c {l__formal_hd_#1_box}
    \hbox_set:cn {l__formal_hd_#1_box} 
        { % hbox is always text mode
            ${#2 \mkern \use:c{l__formal_#1int_mukern}$
        }
    \box_clear_new:c {l__formal_bdy_#1_box}
    \hbox_set:cn {l__formal_bdy_#1_box} 
        { % hbox is always text mode
            ${\mskip \use:c{l__formal_#1bef_muskip} #2 \mkern \use:c{l__formal_#1int_mukern}$
        }
}

% Use this command to declare settings that will stay for the rest of the document!
\NewDocumentCommand \logictoolsoptions { m }
{
\keys_set:nn {formal/options} 
    {
    #1 
    }
}
\ExplSyntaxOff

% Command that puts things inside the above environment, can be used inline.
\newcommand{\fmllgc}[1]{ % you are adding a space here
\begin{formallogic}#1
\end{formallogic} % you are adding a space here
}

% Consistent naming scheme for logical operators
% shouldn't these be declared as maths symbols of the appropriate class?
% \newcommand{\limplies}{\rightarrow}
\newcommand*{\limplies}{\mathbin{\rightarrow}}
% \newcommand{\liff}{\leftrightarrow}
\newcommand*{\liff}{\mathbin{\leftrightarrow}}
%--------------------------------------------------

\ExplSyntaxOn
% Some commands for turning latin characters into greek ones
% needs a different name!
% but, whatever you call it, why can't you just do this?
\NewDocumentCommand{\textgreek}{m}
% \NewDocumentCommand{\ucgreek}{m}
 {
  \str_case_e:nnF { #1 }
   {
    {A}{\mathrm{A}}
    {B}{\mathrm{B}}
    {C}{\Sigma}
    {D}{\Delta}
    {E}{\mathrm{E}}
    {F}{\Phi}
    {G}{\Gamma}
    {H}{\mathrm{H}}
    {I}{\mathrm{I}}
    {J}{\Theta}
    {K}{\mathrm{K}}
    {L}{\Lambda}
    {M}{\mathrm{M}}
    {N}{\mathrm{N}}
    {O}{\mathrm{O}}
    {P}{\Pi}
    {Q}{\mathrm{X}}
    {R}{\mathrm{P}}
    {S}{\Sigma}
    {T}{\mathrm{T}}
    {U}{\Upsilon}
    {V}{\mathrm{V}}
    {W}{\Omega}
    {X}{\Xi}
    {Y}{\Psi}
    {Z}{\mathrm{Z}}
%    }
%    {#1}
%  }
% \NewDocumentCommand{\lcgreek}{m}
%  {
%   \str_case_e:nnF { #1 }
%    {
    {a}{\alpha}
    {b}{\beta}
    {c}{\varsigma}
    {d}{\delta}
    {e}{\varepsilon}
    {f}{\varphi}
    {g}{\gamma}
    {h}{\eta}
    {i}{\iota}
    {j}{\vartheta}
    {k}{\kappa}
    {l}{\lambda}
    {m}{\mu}
    {n}{\nu}
    {o}{o}
    {p}{\pi}
    {q}{\chi}
    {r}{\rho}
    {s}{\sigma}
    {t}{\tau}
    {u}{\upsilon}
    {v}{\nu}
    {w}{\omega}
    {x}{\xi}
    {y}{\psi}
    {z}{\zeta}
   }
   {#1}
 }

% % don't use undeclared variables
% \tl_new:N \l__formal_arg_tl
% % A way to call these commands on "\text{stuff}" instead of just "stuff"
% % needs a different name!
% \NewDocumentCommand{\textgreek}{m}
% { % more generally, I suspect this is not really wise
%     \tl_set:Nn \l__formal_arg_tl { #1 }
%     \regex_replace_all:nnN {\c{text}\{([a-z])\}}{\c{lcgreek}{\1}}
%     \l__formal_arg_tl
%     \regex_replace_all:nnN {\c{text}\{([A-Z])\}}{\c{ucgreek}{\1}}
%     \l__formal_arg_tl
%
%     \l__formal_arg_tl
% }

\ExplSyntaxOff


%-----------------------------------------------------------------------------

% Shorter equals sign
\newcommand{\@ltoolsshorteq}{%
  \settowidth{\@tempdima}{$x$}% Width of x in mathfont
  \resizebox{\@tempdima}{\height}{=}%
}

\ExplSyntaxOn
% Provides the symbols for l-one, l-two, l-equals and nice looking superscript
% using \text here again seems wrong - I guess the idea is to \ensuremath
% I've been told I should never use \ensuremath, but I tend to in marking up logic ...
% I think that would be better than using \text this way, unless somebody like egreg
% or one of the latex team has said otherwise
% \hspace is a text space command and not maths mode
\NewDocumentCommand{\lsym}{m o}%
{
\IfNoValueTF{#2}
    {% No superscript:
        \str_case:nnF {#1}
        {
            {1}{\text{$\mathcal{L}\sb{1}$}}
            {2}{\text{$\mathcal{L}\sb{2}$}}
            {=}{\text{$\mathcal{L}\sb{\text{\hspace{0.01em}\@ltoolsshorteq}}$}}
        }
        {\text{$\mathcal{L}\sb{\text{#1}}$}}
    }
    {% Superscript:
        \str_case:nnF {#1}
        {
            {1}{\text{$\mathcal{L}\sb{1}^{\text{#2}}$}}
            {2}{\text{$\mathcal{L}\sb{2}^{\text{#2}}$}}
            {=}{\text{$\mathcal{L}\sb{\text{\hspace{0.01em}\@ltoolsshorteq}}^{\text{#2}}$}}
        }
        {\text{$\mathcal{L}\sb{\text{#1}}^{\text{#2}}$}}
    }
}

\ExplSyntaxOff

\DeclareQuantifier{exists}{\exists}
\DeclareQuantifier{forall}{\forall}


\edef\originalbmathcode{%
    \noexpand\mathchardef\noexpand\@tempa\the\mathcode`\(\relax}
\def\resetMathstrut@{%
  \setbox\z@\hbox{%
    \originalbmathcode
    \def\@tempb##1"##2##3{\the\textfont"##3\char"}%
    \expandafter\@tempb\meaning\@tempa \relax
  }%
  \ht\Mathstrutbox@\ht\z@ \dp\Mathstrutbox@\dp\z@
}
